@page
@model WebAPIAdaptorMenuBarModel
@{
    ViewData["Title"] = "UrlAdaptor";

    var filterTrueFalseUITemplate = new
    {
        ui = new
        {
            create = "createTrueFalseCustomFilter",
            write = "writeTrueFalseCustomFilter",
            read = "readTrueFalseCustomFilter"
        },
        @operator = "equal" // <<<--- default operator
    };

    // var stringOperator = new[] {
    //     new { value = "startsWith", text = "Starts With" },
    //     // new { value = "endsWith", text = "Ends With" },
    //     // new { value = "contains", text = "Contains" },
    //     new { value = "equal", text = "Equal" },
    //     // new { value = "notEqual", text = "Not Equal" }
    // };

    // Changing the value does not work!
    // var dateOperator = new[] {
    //     new { value = "myeq", text = "Equal" },
    //     new { value = "myne", text = "Not Equal" },
    //     new { value = "myge", text = "After" },
    //     // new { value = "greaterThan", text = "After" },
    //     // new { value = "lessThan", text = "Before" }
    // };
}
@* <e-grid-filterSettings type="Menu"
                       operators="@(new { stringOperator = stringOperator })">
</e-grid-filterSettings> *@

<div id="ControlRegion">
    <ejs-grid id="DataGrid"
              dataBound="bound"
              actionFailure="actionFailure"
              allowPaging="true"
              allowSorting="true"
              allowResizing="true"
              allowFiltering="true"
              allowGrouping="true"
              toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel","Search" })">
        <e-data-manager url="/api/Grid" adaptor="WebApiAdaptor"></e-data-manager>
        <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Normal"></e-grid-editSettings>
        <e-grid-pagesettings pageSize="5" pageCount="5"></e-grid-pagesettings>
        <e-grid-filterSettings type="Menu"></e-grid-filterSettings>
        <e-grid-columns>
            <e-grid-column field="OrderID" headerText="Order ID" isPrimaryKey="true" textAlign="Right" width="120"></e-grid-column>
            <e-grid-column field="CustomerID" headerText="Customer ID" width="150"></e-grid-column>
            <e-grid-column field="EmployeeID" headerText="Employee ID" textAlign="Right" width="120"></e-grid-column>
            <e-grid-column field="Freight" headerText="Freight" textAlign="Right" format="C2" width="140"></e-grid-column>
            <e-grid-column field="ShipCity" headerText="Ship City" width="150"></e-grid-column>
            <e-grid-column field="OrderDate" headerText="Order Date" width="130" textAlign="Right" format="yMd" type="date" editType="datepickeredit"></e-grid-column>
            <e-grid-column field="Verified" headerText="Verified" displayAsCheckBox="true" textAlign="Center" width="150" filter="filterTrueFalseUITemplate"></e-grid-column>
        </e-grid-columns>
    </ejs-grid>
</div>

<script>

    ej.base.enableRipple(true);

    function bound(args) {
        var inputObj;
        var elem;
        [1, 4].forEach(index => {
            this.columns[index].filter.ui = {
                create: (args) => {
                    elem = document.createElement('input');
                    args.target.appendChild(elem);
                    inputObj = new ej.inputs.Input.createInput({
                        floatLabelType: 'Never',
                        element: elem
                    });
                },
                read: (args) => {
                    args.fltrObj.filterByColumn(args.column.field, args.operator, args.element.value);
                },
                write: (args) => {
                    elem.value = args.filteredValue || '';

                }
            }
        });
    }

    /* Verified - dropDown - True|False */
        var filterCustomTrueFalseData = [
        { Type: 'All' },
        { Type: 'True' },
        { Type: 'False' }
    ];
    let dropTrueFalseInstance;
    function createTrueFalseCustomFilter(args) {
        console.log("createCustomFilter");

        // <<<--- Selecting a default operator in cusomFilter function
        document.querySelector(".e-flm_optrdiv").style.display = 'none'; // <<<---
        document.querySelector(".e-flmenu-valuediv").style.paddingTop = "0"; // <<<---

        var filterInputElement = new ej.base.createElement('input', { className: 'filter-input' });
        args.target.appendChild(filterInputElement);
        dropTrueFalseInstance = new ej.dropdowns.DropDownList({
            dataSource: new ej.data.DataManager(filterCustomTrueFalseData),
            fields: { text: 'Type', value: 'Type' },
            placeholder: 'Select a value',
            popupHeight: '200px'
        });
        dropTrueFalseInstance.appendTo(filterInputElement);
    }
    function writeTrueFalseCustomFilter(args) {
        console.log("writeCustomFilter");
        dropTrueFalseInstance.value = args.filteredValue;
    }
    function readTrueFalseCustomFilter(args) {
        console.log(`readCustomFilter: ${args.column.field}`);
        args.fltrObj.filterByColumn(args.column.field, args.operator, dropTrueFalseInstance.value);
    }
    //#endregion

    function actionFailure(args) {
        console.log(`actionFailure: ${args.requestType}`);
        console.log(args);
    }
</script>
